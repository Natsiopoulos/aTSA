{
    "contents" : "#' Holt's Two-parameter Exponential Smoothing\n#' @description Performs Holt's two-parameter exponential smoothing for linear\n#' trend or damped trend.\n#' @param x a numeric vector or univariate time series.\n#' @param type the type of interaction between the level and the linear trend. See \n#' details.\n#' @param alpha the parameter for the level smoothing. The default is \\code{0.2}.\n#' @param beta the parameter for the trend smoothing. The default is \\code{0.1057}.\n#' @param lead the number of steps ahead for which prediction is required. \n#' The default is \\code{0}.\n#' @param damped a logical value indicating a damped trend. See details. The default is\n#' \\code{FALSE}.\n#' @param phi a smoothing parameter for damped trend. The default is \\code{0.98}, only valid\n#' for \\code{damped = TRUE}.\n#' @param plot a logical value indicating to print the plot of original data v.s smoothed \n#' data. The default is \\code{TRUE}.\n#' @details Holt's two parameter is used to forecast a time series with trend, but \n#' wihtout seasonal pattern. For the additive model (\\code{type = \"additive\"}), the \n#' \\eqn{h}-step-ahead forecast is given by \\eqn{hat{x}[t+h|t] = level[t] + h*b[t]},\n#'  where\n#' \\deqn{level[t] = \\alpha *x[t] + (1-\\alpha)*(b[t-1] + level[t-1]),}\n#' \\deqn{b[t] = \\beta*(level[t] - level[t-1]) + (1-\\beta)*b[t-1],}\n#' in which \\eqn{b[t]} is the trend component.\n#' For the multiplicative (\\code{type = \"multiplicative\"}) model, the \n#' \\eqn{h}-step-ahead forecast is given by \\eqn{hat{x}[t+h|t] = level[t] + h*b[t]},\n#'  where\n#' \\deqn{level[t] = \\alpha *x[t] + (1-\\alpha)*(b[t-1] * level[t-1]),}\n#' \\deqn{b[t] = \\beta*(level[t] / level[t-1]) + (1-\\beta)*b[t-1].} \n#' \n#' Compared with the Holt's linear trend that displays a constant increasing or \n#' discreasing, the damped trend generated by exponential smoothing method shows a \n#' exponential growth or decline, which is a situation between simple exponential\n#' smoothing (with 0 increasing or discreasing rate) and Holt's two-parameter smoothing.\n#' If \\code{damped = TRUE}, the additive model becomes\n#' \\deqn{hat{x}[t+h|t] = level[t] + (\\phi + \\phi^{2} + ... + \\phi^{h})*b[t],}\n#' \\deqn{level[t] = \\alpha *x[t] + (1-\\alpha)*(\\phi*b[t-1] + level[t-1]),}\n#' \\deqn{b[t] = \\beta*(level[t] - level[t-1]) + (1-\\beta)*\\phi*b[t-1].}\n#' The multiplicative model becomes\n#' \\deqn{hat{x}[t+h|t] = level[t] *b[t]^(\\phi + \\phi^{2} + ... + \\phi^{h}),}\n#' \\deqn{level[t] = \\alpha *x[t] + (1-\\alpha)*(b[t-1]^{\\phi} * level[t-1]),}\n#' \\deqn{b[t] = \\beta*(level[t] / level[t-1]) + (1-\\beta)*b[t-1]^{\\phi}.}\n#' See Chapter 7.4 for more details in R. J. Hyndman and G. Athanasopoulos (2013).\n#' @note Missing values are removed before analysis. \n#' @return A list with class \"\\code{Holt}\" containing the following components:\n#' \\item{estimate}{the estimate values.}\n#' \\item{alpha}{the smoothing parameter used for level.}\n#' \\item{beta}{the smoothing parameter used for trend.}\n#' \\item{phi}{the smoothing parameter used for damped trend.}\n#' \\item{x.pred}{the predicted values, only available for \\code{lead} > 0.}\n#' \\item{accurate}{the accurate measurements.}\n#' @author Debin Qiu\n#' @references R. J. Hyndman and G. Athanasopoulos, “Forecasting: principles and\n#' practice,” 2013. [Online]. Available: \\url{http://otexts.org/fpp/}.\n#' @examples x <- (1:100)/100\n#' y <- 2 + 1.2*x + rnorm(100)\n#' \n#' ho0 <- Holt(y) # with additive interaction\n#' ho1 <- Holt(y,damped = TRUE) # with damped trend\n#' \n#' # multiplicative model for AirPassengers data, \n#' # although seasonal pattern exists.\n#' ho2 <- Holt(AirPassengers,type = \"multiplicative\")\n#'\n#' @export \nHolt <- function(x,type = c(\"additive\",\"multiplicative\"),\n                 alpha = 0.2,beta = 0.1057,lead = 0,\n                 damped = FALSE,phi = 0.98,plot = TRUE)\n{\n  if (NCOL(x) > 1)\n    stop(\"'x' must be a numeric vector or univariate time series \")\n  if (any(c(alpha,beta) > 1) || any(c(alpha,beta) < 0))\n    stop(\"'alpha' or 'beta' must be between 0 and 1\")\n  if (phi > 1 || phi < 0)\n    stop(\"'phi' must be between 0 and 1\")\n  type <- match.arg(type)\n  if (any(!is.finite(x)))\n    warning(paste(\"missing values exist at time\",which(!is.finite(x)),\n                  \"and will be removed.\"))\n  if (is.ts(x))\n    x <- ts(x[is.finite(x)],start = time(x)[1],frequency = frequency(x))\n  else\n    x <- x[is.finite(x)]\n  n <- length(x)\n  if (n < 1L)\n    stop(\"invalid length of 'x'\")\n  level <- c(x[1],numeric(n-1))\n  trend <- numeric(n)\n  trend[1] <- switch(type,additive = (x[n] - x[1])/n,\n                     multiplicative = x[2]/x[1])\n  x.hat <- c(x[1],numeric(n-1))\n  phi <- ifelse(damped,phi,1)\n  for (i in 2:n) {\n    if (type == \"additive\") {\n      level[i] <- alpha*x[i] + (1 - alpha)*(level[i-1] + phi*trend[i-1])\n      trend[i] <- beta*(level[i] - level[i-1]) + (1 - beta)*phi*trend[i-1]\n      x.hat[i] <- level[i-1] + phi*trend[i-1]\n    }\n    else {\n      level[i] <- alpha*x[i] + (1 - alpha)*(level[i-1] * trend[i-1]^phi)\n      trend[i] <- beta*(level[i] / level[i-1]) + (1 - beta)*trend[i-1]^phi\n      x.hat[i] <- level[i-1] * trend[i-1]^phi\n    }\n  }\n  if (is.ts(x))\n    x.hat <- ts(x.hat,start = time(x)[1],frequency = frequency(x))\n  result <- list(estimate = x.hat,alpha = alpha, beta = beta)\n  if (lead > 0) {\n    if (lead < 0 || lead%%1 != 0) \n      stop(\"'lead' must be a positive integer\")\n    l.s <- 1:lead\n    x.pred <- switch(type, additive = level[n] + cumsum(phi^l.s)*trend[n],\n                     multiplicative = level[n] + trend[n]^(cumsum(phi^l.s)))\n    names(x.pred) <- n + 1:lead\n    result <- c(result,list(phi = phi, prediction = x.pred))\n  }\n  if (plot) {\n    plot(x,main = \"original v.s smoothed data\",type = \"l\")\n    lines(x.hat,col = 2)\n  }\n  k <- ifelse(damped,3,2)\n  result <- c(result,list(accurate = accurate(x,x.hat,k,output = FALSE)))\n  class(result) <- \"Holt\"\n  return(result)\n}",
    "created" : 1430071265903.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2975773359",
    "id" : "769E193F",
    "lastKnownWriteTime" : 1430071285,
    "path" : "~/Desktop/R Package/aTSA/R/Holt.R",
    "project_path" : "Holt.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}